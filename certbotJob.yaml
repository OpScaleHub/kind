---
apiVersion: v1
kind: Secret
metadata:
  name: cloudflare-api-key
type: Opaque
data:
  api-token: "FEED UR API TOKEN"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: certbot
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: certbot
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: certbot
subjects:
- kind: ServiceAccount
  name: certbot
  namespace: default
roleRef:
  kind: Role
  name: certbot
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: certbot-renewal
spec:
  schedule: "0 0 * * 0"
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: certbot
          restartPolicy: OnFailure
          containers:
          - name: certbot
            image: docker.io/certbot/dns-cloudflare:v3.3.0
            command:
              - /bin/sh
              - -c
            env:
            - name: API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: cloudflare-api-key
                  key: api-token
            args:
              - |
                set -ex
                apk add kubectl
                export DOMAIN="local.opscale.ir"
                echo "dns_cloudflare_api_token = ${API_TOKEN}" > cloudflare.ini
                chmod 600 cloudflare.ini
                certbot certonly --dns-cloudflare --dns-cloudflare-credentials cloudflare.ini -d "$DOMAIN" -d "*.$DOMAIN" --register-unsafely-without-email --agree-tos --server https://acme-v02.api.letsencrypt.org/directory --non-interactive --logs-dir /etc/letsencrypt/log
                kubectl -n default create secret generic wildcard-tls-secret --from-file=tls.crt=/etc/letsencrypt/live/"$DOMAIN"/fullchain.pem --from-file=tls.key=/etc/letsencrypt/live/"$DOMAIN"/privkey.pem --dry-run=client -o yaml | kubectl apply -f -
                echo "Certificate renewed and secret updated."
            volumeMounts:
            - name: letsencrypt-data
              mountPath: /etc/letsencrypt
          # securityContext:
          #   runAsUser: 1000
          #   runAsGroup: 1000
          volumes:
          - name: letsencrypt-data
            emptyDir: {}
          dnsPolicy: "None"
          dnsConfig:
            nameservers:
              - 8.8.8.8
              - 1.1.1.1
