name: Renew Certificate

on:
  # schedule:
  #   - cron: '0 7 * * 0'  # Runs weekly on Sundays at midnight
  workflow_dispatch: # Allows manual triggering of the workflow
  release:
    types: [published]

jobs:
  renew-certificate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Install Certbot
        run: |
          sudo apt-get update
          sudo apt-get install -y certbot python3-certbot-dns-cloudflare

      - name: Renew certificate and create Kubernetes secret file
        env:
          DOMAIN: ${{ vars.DOMAIN }}
        run: |
          WORK_DIR="/tmp/letsencrypt"
          mkdir -p $WORK_DIR
          echo "The DOMAIN variable is set to $DOMAIN"
          certbot certonly \
            --domains "$DOMAIN,*.$DOMAIN" \
            --register-unsafely-without-email --agree-tos \
            --dns-cloudflare --dns-cloudflare-credentials cloudflare.ini \
            --server https://acme-v02.api.letsencrypt.org/directory  \
            --config-dir $WORK_DIR --work-dir $WORK_DIR --logs-dir $WORK_DIR

          TLS_CRT=$(cat $WORK_DIR/live/"$DOMAIN"/fullchain.pem | base64 -w 0)
          TLS_KEY=$(cat $WORK_DIR/live/"$DOMAIN"/privkey.pem | base64 -w 0)

          cat <<EOF > wildcard-tls.yaml
          apiVersion: v1
          data:
            tls.crt: $TLS_CRT
            tls.key: $TLS_KEY
          kind: Secret
          metadata:
            name: wildcard-tls
          type: Opaque
          EOF

      - name: Install Node.js and @octokit/rest
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
      - run: npm install @octokit/rest

      - name: Set environment variables
        env:
          API_TOKEN: ${{ secrets.API_TOKEN }}
          DOMAIN: ${{ vars.DOMAIN }}
        run: |
          if [ -z "$API_TOKEN" ]; then
            echo "ERROR: API_TOKEN secret is not set." >&2
            exit 1
          fi
          if [ -z "$DOMAIN" ]; then
            echo "ERROR: DOMAIN variable is not set." >&2
            exit 1
          fi
          export DOMAIN="$DOMAIN"
          echo "dns_cloudflare_api_token = ${API_TOKEN}" > cloudflare.ini
          chmod 600 cloudflare.ini

      - name: Get or create release and upload certificate
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const fs = require('fs');
            const { owner, repo } = context.repo;
            let version;
            try {
              const versionFile = await github.rest.repos.getContent({
                owner,
                repo,
                path: 'version.txt'
              });
              version = Buffer.from(versionFile.data.content, 'base64').toString().trim();
            } catch (error) {
              version = 'stable';
            }
            let release;
            try {
              release = await github.rest.repos.getReleaseByTag({
                owner,
                repo,
                tag: `v${version}`
              });
            } catch (error) {
              release = await github.rest.repos.createRelease({
                owner,
                repo,
                tag_name: `v${version}`,
                name: `Release v${version}`,
                body: 'Release containing SSL certificates',
                draft: false,
                prerelease: false
              });
            }
            // Upload asset
            const assetPath = './wildcard-tls.yaml';
            if (!fs.existsSync(assetPath)) {
              throw new Error('wildcard-tls.yaml not found');
            }
            const asset = await github.rest.repos.uploadReleaseAsset({
              url: release.data.upload_url,
              headers: {
                'content-type': 'application/x-yaml',
                'content-length': fs.statSync(assetPath).size
              },
              name: 'wildcard-tls.yaml',
              data: fs.readFileSync(assetPath)
            });
            console.log('Asset uploaded:', asset.data.browser_download_url);
